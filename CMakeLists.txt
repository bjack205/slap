cmake_minimum_required(VERSION 3.0.0)
list(APPEND CMAKE_MESSAGE_CONTEXT slap)
project(slap VERSION 0.2.0 LANGUAGES C CXX)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

# Include useful modules
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(CMakePrintHelpers)
include(GNUInstallDirs)
include(Functions)
include(FetchContent)

# Set RPATH
#   This ensures any shared libraries generated by the project
#   can be found when installed
#   See 26.2.2 of Professional CMake
file(RELATIVE_PATH relDir
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}
    ${CMAKE_CURRENT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}
    )
set(CMAKE_INSTALL_RPATH $ORIGIN $ORIGIN/${relDir})

# Add compile options
add_compile_options(-Wall -Wextra -pedantic -Werror -Wno-error=unknown-pragmas)
add_compile_options(-mavx2 -mfma)

##############################
# Options
##############################

# Handle default build type
set(SLAP_DEFAULT_BUILD_TYPE "Release")
if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "No build type specified. Setting CMAKE_BUILD_TYPE to ${SLAP_DEFAULT_BUILD_TYPE}")
  set(CMAKE_BUILD_TYPE ${SLAP_DEFAULT_BUILD_TYPE} CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif ()

# Enable testing
option(SLAP_BUILD_TESTS "Build tests for slap" ON)

# Code Coverage
option(SLAP_CODE_COVERAGE "Compile slap with Code Coverage." OFF)

# Documentation
option(SLAP_BUILD_DOCS "Build documentation for slap." OFF)

# Code Coverage
option(SLAP_CODE_COVERAGE "Compile slap with code coverage information." OFF)

# Enable clang-tidy analysis 
option(SLAP_CLANG_TIDY "Run clang-tidy analyzer on the source code." OFF)

##############################
# Dependencies
##############################
if (SLAP_BUILD_DOCS)
  find_package(Doxygen REQUIRED)
endif ()
if (SLAP_BUILD_TESTS)
  FetchContent_Declare(googletest
      GIT_REPOSITORY https://github.com/google/googletest
      GIT_TAG 58d77fa8070e8cec2dc1ed015d66b454c8d78850
      )
  FetchContent_MakeAvailable(googletest)
  enable_testing()
  include(GoogleTest)
  include(CTest)
endif ()

##############################
# Code Coverage 
##############################
if (SLAP_CODE_COVERAGE AND CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
  message(STATUS "Compiling slap with coverage info.")
  add_compile_options(-O0 -g -fprofile-arcs -ftest-coverage)
  add_link_options(-fprofile-arcs -ftest-coverage)
endif ()

##############################
# Build
##############################

# Compile options
add_compile_options(-Wall -Wextra -pedantic -Werror)

# Make all includes relative to src/ directory
include_directories(${PROJECT_SOURCE_DIR}/src)

# Build source files
add_subdirectory(src/slap)

##############################
# Testing 
##############################
if (SLAP_BUILD_TESTS)
  enable_testing()
  add_subdirectory(test)
endif ()

##############################
# Documentation 
##############################
if (SLAP_BUILD_DOCS)
  add_subdirectory(docs)
endif ()

##############################
# Packaging / Installation 
##############################
# add_subdirectory(packaging)


##############################
# Examples
##############################
add_executable(getting_started examples/getting_started.c)
target_link_libraries(getting_started PUBLIC slap::slap)
add_test(NAME getting_started COMMAND getting_started)

add_executable(simple_test examples/simple_test.c)
target_link_libraries(simple_test PUBLIC slap::slap)
add_test(NAME simple_test COMMAND simple_test)