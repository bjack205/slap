name: Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: OS ${{ matrix.os }} - ${{ matrix.c_compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cxx_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cxx_compiler: clang++
          - os: macos-latest
            c_compiler: clang
            cxx_compiler: clang++

    steps:
    - uses: actions/checkout@v2

    - name: Install Linux Dependencies
      if: ${{ matrix.os }} == 'ubuntu-latest'
      run: | 
        sudo apt-get install libeigen3-dev -y
        sudo apt-get install clang -y
        
    - name: Install MacOS Depedencies
      if: matrix.os == 'macos-latest'
      run: brew install eigen

    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build && cd build
        cmake -D CMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
              -D CMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -D CMAKE_CXX_COMPILER=${{ matrix.cxx_compiler }} \
              --log-context ..

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest -C ${{ env.BUILD_TYPE }} .
      
  codecov:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - name: Install Dependencies
      run: sudo apt-get install libeigen3-dev -y
    - name: Configure CMake
      run: |
        mkdir ${{github.workspace}}/build && cd build
        cmake -D CMAKE_BUILD_TYPE=Debug \
              -D SLAP_CODE_COVERAGE=ON \
              --log-context ..
    - name: Build
      run: cmake --build ${{ github.workspace }}/build
    - name: Run Tests
      working-directory: ${{ github.workspace }}/build
      run: ctest .
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
       token: ${{ secrets.CODECOV_TOKEN }}
       gcov: true
       fail_ci_if_error: true
#    - name: Process code coverage results
#      run: |
#        cd build
#        echo "ls slap.dir"
#        ls src/slap/CMakeFiles/slap.dir
#        gcov -pb **/*.o
#        echo "ls build"
#        ls .
#    - name: Upload Results
#      run: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports."

  arduino:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup Arduino CLI
      uses: arduino/setup-arduino-cli@v1

    - name: Install Arduino CLI
      run: |
        arduino-cli core update-index
        arduino-cli core install arduino:avr

    - name: Compile Arduino Example
      run: |
        cd ${{ github.workspace }}/examples
        arduino-cli compile -b arduino:avr:nano --libraries ../.. arduino_slap
        
